@model IEnumerable<AssistantTrainingCore.Models.TrainingGroup>

<script>
    function test() {
        $('#myModal').modal('show');
    }
</script>

<h3>Szkolenia</h3>
<div class="row">
    <div class="col-md-2">
        <div>
            <br/>
            <button type="button" class="btn btn-default" data-toggle="modal" data-target="#myModal">Create</button>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Dodaj Szkolenie</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Training Number" name="newTrainingNumber" id="newTrainingNumber">
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding-top: 10px;">
                            <div class="col-md-8">
                                <select id="sel" multiple="multiple" class="col-md-12" style="width: 100%; height: auto"></select>
                            </div>
                            <div class="col-md-4">
                                <div style="width: 100%; height: auto;">
                                    <input type="checkbox" id="searchTermCheckbox"/>
                                    <label for="searchTerm"> Wszystkie </label>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-2">

                            </div>
                            <div class="col-md-10">
                                <div class="input-group">
                                    <div id="remainders"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="save-new-training">Yes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2"></div>
    
</div>

@if (User.IsInRole("Administrator") || User.IsInRole("Engineer"))
{
    <script>
        var userAdminOrEngineer = true;
    </script>

}
else
{
    <script>
        var useruserAdminOrEngineer = false;
    </script>

}

@if (User.IsInRole("Administrator"))
{
    <script>
        var userAdmin = true;
    </script>
}
else
{
    <script>
        var userAdmin = false;
    </script>
}

<script>
        var CountIt = 0 
        function GetCountIt() { 
            debugger;
            var page = $("#trainingGroup").data("kendoGrid").dataSource.page();
            var pageSize = $("#trainingGroup").data("kendoGrid").dataSource.pageSize();
            CountIt++;
            return (page * pageSize) - pageSize + CountIt 
        }

        function trainingGroup_DataBound() { 
                CountIt = 0; $('#trainingGroup').data('kendoGrid').pager.unbind("change").bind('change', function (e) {
                CountIt = 0
            })
        }
</script>

<div >

            @(Html.Kendo().Grid<AssistantTrainingCore.Models.TrainingGroup>(Model)
                .Name("trainingGroup")
                .ToolBar(t => t.Search())
                .Events(events =>
                {
                    events.DataBound("trainingGroup_DataBound"); 
                })
                .Columns(columns =>
                {
                    columns.Bound("").ClientTemplate("#=GetCountIt()#").Title("Lp.").Width(50);
                    columns.Bound(c => c.TrainingName.Number).Title("Training Number").Filterable(true).Width(110);
                    columns.Bound(c => c.Instruction.Number).Title("Instruction Number").Filterable(true).Width(110);
                    columns.Bound(c => c.Instruction.Version).Title("Version").Filterable(true).Width(110);
                    columns.Bound(c => c.TrainingName.Number)
                        .Title("Akcja")
                        .ClientTemplate(" <a href='/Instructions/Details/#=ID#'>Details</a> # if (userAdminOrEngineer == true) { # <a href='/Instructions/Edit/#=ID#'>Edit</a> # } # # if (userAdmin == true) { # <a href='/Instructions/Delete/#=ID#'>Delete</a>  # } # ")
                        .HtmlAttributes(new { style = "text-align: center;"})
                        .Width(100)
                        .Sortable(false)
                        .Filterable(false);
                }).Pageable(pager => pager
                    .PageSizes(true)
                    .PageSizes(new int[] {20, 50, 100})
                    .Input(true)
                    .Info(true)
                    .PreviousNext(true)
                    .Refresh(true)
                )
                .Navigatable()
                .Sortable()
                .Filterable())
            
    @* @( *@
    @*     Html.Grid(Model).Named("TrainingGrid") *@
    @*         .Columns(columns => *@
    @*         { *@
    @*             columns.Add() *@
    @*                     .Encoded(false) *@
    @*                     .Sanitized(false) *@
    @*                     .SetWidth(40) *@
    @*                     .RenderValueAs(f => index(f)); *@
    @* *@
    @*             columns.Add(f => f.TrainingName.Number).Titled("Training Number").SetWidth(110); *@
    @*             columns.Add(f => f.Instruction.Number).Titled("Instruction Number").SetWidth(110); *@
    @*             columns.Add(f => f.Instruction.Version).Titled("Version").SetWidth(110); *@
    @*             //columns.Add(f => f.Instruction.Number).Titled("Instruction Number").SetWidth(110);  *@
    @*             columns.Add() *@
    @*                     .Encoded(false) *@
    @*                     .Sanitized(false) *@
    @*                     .SetWidth(30) *@
    @*                     .RenderValueAs(f => Edit(f.TrainingNameId)); *@
    @*         }) *@
    @*         .Sortable() *@
    @*         .WithPaging(50)) *@
    
    @* @helper Edit(int Id) *@
    @* {           *@
    @*          <span><a href="@Id" id="untrained">Untrained</a></span> *@
    @*     @:|  <span><a href="@Id" id="trained">Trained</a></span> *@
    @*             *@
    @*     if (User.IsInRole("Administrator")) *@
    @*     { *@
    @*         @:| @Html.ActionLink("Delete", "DeleteTraining", new { id = Id }) *@
    @*     } *@
    @* } *@
    @* *@
    @* @helper index(AssistantTraining.Models.TrainingGroup item) *@
    @* { *@
    @* *@
    @* object column=String.Empty; *@
    @* object dir = String.Empty; *@
    @* int index = 0; *@
    @* *@
    @* if (!String.IsNullOrEmpty(Request.QueryString["grid-column"])) *@
    @* { *@
    @*     column = Request.QueryString["grid-column"]; *@
    @* *@
    @*     if (!String.IsNullOrEmpty(Request.QueryString["grid-column"])) *@
    @*     { *@
    @*         dir = Request.QueryString["grid-dir"]; *@
    @*     } *@
    @* *@
    @*     switch (column.ToString()) *@
    @*     { *@
    @*         case "Instruction.Version": *@
    @* *@
    @*             if (!String.IsNullOrEmpty(dir.ToString()) && dir.ToString().Equals("1")) *@
    @*             { *@
    @*                 index = Model.OrderByDescending(x => x.Instruction.Version).ToList().FindIndex(x => x.Instruction.Number == item.Instruction.Number) + 1; *@
    @*             } *@
    @*             else *@
    @*             { *@
    @*                 index = Model.OrderBy(x => x.Instruction.Version).ToList().FindIndex(x => x.Instruction.Number == item.Instruction.Number) + 1; *@
    @*             } *@
    @*             break; *@
    @* *@
    @*         case "TrainingName.Number": *@
    @* *@
    @*             if (!String.IsNullOrEmpty(dir.ToString()) && dir.ToString().Equals("1")) *@
    @*             { *@
    @*                 index = Model.OrderByDescending(x => x.TrainingName.Number).ToList().FindIndex(x => x.Instruction.Number == item.Instruction.Number) + 1; *@
    @*             } *@
    @*             else *@
    @*             { *@
    @*                 index = Model.OrderBy(x => x.TrainingName.Number).ToList().FindIndex(x => x.Instruction.Number == item.Instruction.Number) + 1; *@
    @*             } *@
    @* *@
    @*             break; *@
    @*         case "Instruction.Number": *@
    @* *@
    @*             if (!String.IsNullOrEmpty(dir.ToString()) && dir.ToString().Equals("1")) *@
    @*             { *@
    @*                 index = Model.OrderByDescending(x => x.Instruction.Number).ToList().FindIndex(x => x.Instruction.Number == item.Instruction.Number) + 1; *@
    @*             } *@
    @*             else *@
    @*             { *@
    @*                 index = Model.OrderBy(x => x.Instruction.Number).ToList().FindIndex(x => x.Instruction.Number == item.Instruction.Number) + 1; *@
    @*             } *@
    @* *@
    @*             break; *@
    @*         default: *@
    @*             break; *@
    @*     } *@
    @* *@
    @* } *@
    @* else *@
    @* { *@
    @*     index = Model.ToList().FindIndex(x => x.Instruction.Number == item.Instruction.Number) + 1; *@
    @* } *@
    @*  @Html.Label(index.ToString()); *@
    @* } *@
    
</div>




@* <div class="row" id="refGrid"> *@
@*     @Html.Action("GetGrid") *@
@* </div> *@
@* <h3>Workers</h3> *@
@* <div class="row" id="refWorkerGrid"> *@
@*     @Html.Action("GetWorkerGrid") *@
@* </div> *@
@* *@
@* @section scripts { *@
@*     @Scripts.Render("~/bundles/jqueryval") *@
@*     @Scripts.Render("~/bundles/gridmvc") *@
@*     @Scripts.Render("~/bundles/typeahead") *@
@* *@
@*     <link href="~/Content/bootstrap-datepicker3.min.css" rel="stylesheet" /> *@
@*     <script src="~/Scripts/bootstrap-datepicker.min.js"></script> *@
@*     <script src="~/Scripts/locales/bootstrap-datepicker.pl.min.js"></script> *@
@* *@
@* *@
@* *@
@*     <link href="~/Content/css/s2/select2.min.css" rel="stylesheet" /> *@
@*     <script src="~/Scripts/select2.min.js"></script> *@
@*     <link href="~/Content/css/s2/s2-docs.css" rel="stylesheet" /> *@
@* *@
@*     @Scripts.Render("~/bundles/application/Training") *@
@* } *@

<script src="~/js/training.js"></script>