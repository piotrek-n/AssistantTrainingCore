@model IEnumerable<AssistantTrainingCore.ViewModel.GroupViewModel>

@{
    ViewBag.Title = "Groups";
}

<h2>Groups</h2>

@*<div class="row">
    <div class="col-md-1">
        <a href="@Url.Action("Create", "Groups")" class="btn btn-default">
            Create
            <span class="glyphicon" aria-hidden="true"></span>
        </a>
    </div>
        <div class="col-md-1">
            <a href="@Url.Action("Excel", "Groups")" class="btn btn-default">
                Export
                <span class="glyphicon" aria-hidden="true"></span>
            </a>
        </div>
        <div class="col-md-2">
        </div>
        <div class="col-md-4 pull-right">

            <form class="navbar-form" role="search" id="idFilterWorkersByWorker" method="get" action="/Groups/SearchByGroup">
                <div class="input-group">
                    <input type="text" class="typeahead form-control" autocomplete="off" placeholder="Groups" spellcheck="false" name="srchtermWorkerByGroup" id="srchtermWorkerByGroup">
                    <div class="input-group-btn">
                        <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                    </div>
                </div>
            </form>
        </div>
    </div>
*@

@if (User.IsInRole("Administrator") || User.IsInRole("Engineer"))
{
    <script>
        var userAdminOrEngineer = true;
    </script>

}
else
{
    <script>
        var useruserAdminOrEngineer = false;
    </script>

}

@if (User.IsInRole("Administrator"))
{
    <script>
        var userAdmin = true;
    </script>
}
else
{
    <script>
        var userAdmin = false;
    </script>
}

<p>
        <div class="row">
            <div class="col-md-4">
                <a href="@Url.Action("Create", "Groups")" class="btn btn-primary" role="button">
                    Create
                    <span class="glyphicon" aria-hidden="true"></span>
                </a>
            </div>
            <div class="col-md-4">
            </div>
            <div class="col-md-4">

            </div>
        </div>
</p>

<script>
        var CountIt = 0 
        function GetCountIt() { 
            var page = $("#gridGroup").data("kendoGrid").dataSource.page();
            var pageSize = $("#gridGroup").data("kendoGrid").dataSource.pageSize();
            CountIt++;
            return (page * pageSize) - pageSize + CountIt 
        }

        function YourGrid_DataBound() { 
                CountIt = 0; $('#gridGroup').data('kendoGrid').pager.unbind("change").bind('change', function (e) {
                CountIt = 0
            })
        }

    function changeNewLine(text) {
        if(text == null) {
            return  '<br>';
        }
        var regexp = new RegExp('\n', 'g');
        return text.replace(regexp, '<br>');
    }
</script>

@(Html.Kendo().Grid<AssistantTrainingCore.ViewModel.GroupViewModel>()
            .Name("gridGroup")
            .ToolBar(t => t.Search())
            .ToolBar(tools => tools.Excel())
            .Events(events =>
            {
                events.DataBound("YourGrid_DataBound"); 
            })
            .Columns(columns =>
            {
                columns.Bound(c => c.RowNo).Title("Lp.").Filterable(true).Width(10);
                columns.Bound(c => c.GroupName).Title("Nazwa").Filterable(true).Width(110);

                columns.Bound(c => c.GroupName)
                        .Title("Akcja")
                        .ClientTemplate(" <a href='/Groups/Details/#=ID#'>Details</a> # if (userAdminOrEngineer == true) { # <a href='/Groups/Edit/#=ID#'>Edit</a> # } # # if (userAdmin == true) { # <a href='/Groups/Delete/#=ID#'>Delete</a>  # } # ")
                        .HtmlAttributes(new { style = "text-align: center;"})
                        .Width(100)
                        .Sortable(false)
                        .Filterable(false);

            })
                .Pageable(pager => pager
                .PageSizes(true)
                .PageSizes(new int[] { 20,50,100 })
                .Input(true)
                .Info(true)
                .PreviousNext(true)
                .Refresh(true)
                .PageSizes(true)
              )
            .Navigatable()
            .Sortable()
            .Excel(excel => excel
		        .FileName("Groups Export.xlsx")
		        .Filterable(true)
		        .ProxyURL(Url.Action("Excel_Export_Save", "Groups"))
	        )
            .Filterable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)

                .Read(read => read.Action("SelectGroups", "Groups"))
            )
)
